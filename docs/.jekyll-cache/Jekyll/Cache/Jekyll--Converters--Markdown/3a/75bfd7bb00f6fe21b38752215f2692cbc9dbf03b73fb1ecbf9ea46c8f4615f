I"ç<h2 id="pagerenderer">PageRendererÂ <a name="PageRenderer" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L5" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h2>
<p>The page renderer is a utility for rendering the page at either the
client-side or the server-side, handling the differences in the environment.</p>

<p><strong>Kind</strong>: global class</p>

<ul>
  <li><a href="#PageRenderer">PageRenderer</a>
    <ul>
      <li><a href="#PageRenderer+mount">.mount(controller, view, pageResources, routeOptions)</a> â‡’ <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, ?&gt;}&gt;</code></li>
      <li><a href="#PageRenderer+update">.update(controller, resourcesUpdate)</a> â‡’ <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, \*&gt;}&gt;</code></li>
      <li><a href="#PageRenderer+unmount">.unmount()</a></li>
      <li><a href="#PageRenderer+setState">.setState([state])</a></li>
      <li><del><a href="#PageRenderer+clearState">.clearState()</a></del></li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="pagerenderermountcontroller-view-pageresources-routeoptions--promiseltstatus-number-content-string-pagestate-objectltstring-gtgt">pageRenderer.mount(controller, view, pageResources, routeOptions) â‡’ <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, ?&gt;}&gt;</code>Â <a name="PageRenderer+mount" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L60" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h3>
<p>Renders the page using the provided controller and view. The actual
behavior of this method differs at the client-side and the at
server-side in the following way:</p>

<p>At the server, the method first waits for all the resources to load, and
then renders the page to a string containing HTML markup to send to the
client.</p>

<p>At the client, the method uses the already available resources to render
the page into DOM, re-using the DOM created from the HTML markup send by
the server if possible. After this the method will re-render the page
every time another resource being loaded finishes its loading and
becomes available.</p>

<p>Note that the method renders the page at the client-side only after all
resources have been loaded if this is the first time this method is
invoked at the client.</p>

<p><strong>Kind</strong>: instance method of <a href="#PageRenderer"><code>PageRenderer</code></a><br />
<strong>Returns</strong>: <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, ?&gt;}&gt;</code> - A promise that will resolve to information about the
        rendered page. The <code>status</code> will contain the HTTP status
        code to send to the client (at the server side) or determine the
        type of error page to navigate to (at the client side).
        The <code>content</code> field will contain the rendered markup of
        the page at the server-side, or <code>null</code> at the client-side.</p>

<table>
  <thead>
    <tr>
      <th>Param</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>controller</td>
      <td><code>Controller</code></td>
      <td>The current page controller.</td>
    </tr>
    <tr>
      <td>view</td>
      <td><code>React.Component</code></td>
      <td>The pageâ€™s view.</td>
    </tr>
    <tr>
      <td>pageResources</td>
      <td><code>Object.&lt;string, (\*\|Promise.&lt;\*&gt;)&gt;</code></td>
      <td>The resources for        the view loaded by the controller.</td>
    </tr>
    <tr>
      <td>routeOptions</td>
      <td><code>Object</code></td>
      <td>The current route options.</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="pagerendererupdatecontroller-resourcesupdate--promiseltstatus-number-content-string-pagestate-objectltstring-gtgt">pageRenderer.update(controller, resourcesUpdate) â‡’ <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, \*&gt;}&gt;</code>Â <a name="PageRenderer+update" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L86" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h3>
<p>Handles update of the current route that does not replace the current
controller and view.</p>

<p>The method will use the already available resource to update the
controllerâ€™s state and the view immediately. After that, the method will
update the controllerâ€™s state and view with every resource that becomes
resolved.</p>

<p><strong>Kind</strong>: instance method of <a href="#PageRenderer"><code>PageRenderer</code></a><br />
<strong>Returns</strong>: <code>Promise.&lt;{status: number, content: ?string, pageState: Object.&lt;string, \*&gt;}&gt;</code> - A promise that will resolve to information about the
        rendered page. The <code>status</code> will contain the HTTP status
        code to send to the client (at the server side) or determine the
        type of error page to navigate to (at the client side).
        The <code>content</code> field will contain the rendered markup of
        the page at the server-side, or <code>null</code> at the client-side.</p>

<table>
  <thead>
    <tr>
      <th>Param</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>controller</td>
      <td><code>Controller</code></td>
      <td>The current page controller.</td>
    </tr>
    <tr>
      <td>resourcesUpdate</td>
      <td><code>Object.&lt;string, (\*\|Promise.&lt;\*&gt;)&gt;</code></td>
      <td>The resources        that represent the update the of current state according to the        current route and its parameters.</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="pagerendererunmount">pageRenderer.unmount()Â <a name="PageRenderer+unmount" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L93" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h3>
<p>Unmounts the view from the DOM.</p>

<p>This method has no effect at the server-side.</p>

<p><strong>Kind</strong>: instance method of <a href="#PageRenderer"><code>PageRenderer</code></a></p>

<hr />

<h3 id="pagerenderersetstatestate">pageRenderer.setState([state])Â <a name="PageRenderer+setState" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L103" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h3>
<p>Sets the provided state to the currently rendered view.</p>

<p>This method has no effect at the server-side.</p>

<p><strong>Kind</strong>: instance method of <a href="#PageRenderer"><code>PageRenderer</code></a></p>

<table>
  <thead>
    <tr>
      <th>Param</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[state]</td>
      <td><code>Object.&lt;string, \*&gt;</code></td>
      <td><code>{}</code></td>
      <td>The state to set to the currently        rendered view.</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="pagerendererclearstate"><del>pageRenderer.clearState()</del>Â <a name="PageRenderer+clearState" href="https://github.com/seznam/ima/blob/v17.10.0/packages/core/src/page/renderer/PageRenderer.js#L112" target="_blank"><span class="icon"><i class="fas fa-external-link-alt fa-xs"></i></span></a></h3>
<p><strong><em>Deprecated</em></strong></p>

<p>Clears the state to the currently rendered view.</p>

<p>This method has no effect at the server-side.</p>

<p><strong>Kind</strong>: instance method of <a href="#PageRenderer"><code>PageRenderer</code></a></p>

<hr />

:ET