"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[9450],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,d=u["".concat(l,".").concat(g)]||u[g]||m[g]||r;return t?i.createElement(d,o(o({ref:n},c),{},{components:t})):i.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(5773),a=(t(7294),t(3905));const r={title:"Plugins API",description:"Plugins > Plugins API"},o=void 0,s={unversionedId:"plugins/plugin-interface",id:"plugins/plugin-interface",title:"Plugins API",description:"Plugins > Plugins API",source:"@site/../docs/plugins/plugin-interface.md",sourceDirName:"plugins",slug:"/plugins/plugin-interface",permalink:"/plugins/plugin-interface",draft:!1,editUrl:"https://github.com/seznam/ima/tree/docusaurus/docs/../docs/plugins/plugin-interface.md",tags:[],version:"current",lastUpdatedBy:"Miroslav Jancarik",lastUpdatedAt:1672993145,formattedLastUpdatedAt:"Jan 6, 2023",frontMatter:{title:"Plugins API",description:"Plugins > Plugins API"},sidebar:"docs",previous:{title:"Existing plugins",permalink:"/plugins/available-plugins"},next:{title:"Introduction",permalink:"/devtools/devtools-introduction"}},l={},p=[{value:"Interface functions",id:"interface-functions",level:2},{value:"Automatic registration with Object Container",id:"automatic-registration-with-object-container",level:3},{value:"Updating build.js",id:"updating-buildjs",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"IMA.js development stack offers ",(0,a.kt)("strong",{parentName:"p"},"built-in support for plugins"),". Writing plugins for IMA.js is really\nsimple. It basically comes to creating an ordinary npm package, which exports few special functions, that\nallows it to hook into IMA.js application environment."),(0,a.kt)("h2",{id:"interface-functions"},"Interface functions"),(0,a.kt)("p",null,"There are total of ",(0,a.kt)("strong",{parentName:"p"},"4 functions")," that a plugin can export in its main file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/seznam/ima/blob/master/packages/core/src/vendorLinker.js#L38"},(0,a.kt)("inlineCode",{parentName:"a"},"$registerImaPlugin(ns)")),(0,a.kt)("strong",{parentName:"li"},"{namespace}")," - main purpose of this function is to let IMA.js ",(0,a.kt)("inlineCode",{parentName:"li"},"VendorLinker"),"\nknow, that this is a plugin. Most of the time this function ",(0,a.kt)("strong",{parentName:"li"},"will be empty"),". Optionally as a first and the only argument\nyou get access to ",(0,a.kt)("inlineCode",{parentName:"li"},"namespace"),", which let's you specify to which namespace this plugin should be bound."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/seznam/ima/blob/master/packages/core/src/Bootstrap.js#L144"},(0,a.kt)("inlineCode",{parentName:"a"},"initBind(ns, oc, config)")),(0,a.kt)("strong",{parentName:"li"},"{namespace, ObjectContainer, config.bind)")," - This function has same interface as a function exported\nin ",(0,a.kt)("inlineCode",{parentName:"li"},"bind.js")," of your IMA.js application and also serves the same purpose. This is the place where you would want to initialize\nyour custom constants and bindings and assign them to the ",(0,a.kt)("inlineCode",{parentName:"li"},"ObjectContainer"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/seznam/ima/blob/master/packages/core/src/Bootstrap.js#L171"},(0,a.kt)("inlineCode",{parentName:"a"},"initServices(ns, oc, config)"))," -\n",(0,a.kt)("strong",{parentName:"li"},"{namespace, ObjectContainer, config.services)")," - Similarly to ",(0,a.kt)("inlineCode",{parentName:"li"},"initBind"),", this function is equivalent to a\nfunction exported by ",(0,a.kt)("inlineCode",{parentName:"li"},"services.js")," file in your application."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/seznam/ima/blob/master/packages/core/src/Bootstrap.js#L82"},(0,a.kt)("inlineCode",{parentName:"a"},"initSettings(ns, oc, config)"))," -\n",(0,a.kt)("strong",{parentName:"li"},"{namespace, ObjectContainer, config.settings)")," - You can probably already see the pattern here. This function should\nreturn an object with settings, with the same structure as function in ",(0,a.kt)("inlineCode",{parentName:"li"},"settings.js")," file does. These settings are\nthen ",(0,a.kt)("strong",{parentName:"li"},"merged with your application settings")," a possible conflicts are overridden with the application settings.\nThis allows you to ",(0,a.kt)("strong",{parentName:"li"},"define defaults for your plugin"),", which can be easily overridden in your application.")),(0,a.kt)("p",null,"Putting it all together, your main file in your npm package could look something like this (borrowing contents ",(0,a.kt)("inlineCode",{parentName:"p"},"main.js"),"\nfrom our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/seznam/IMA.js-plugins/blob/master/packages/plugin-useragent/README.md"},"ima-plugin-useragent"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import UserAgent from './AbstractUserAgent.js';\nimport ClientUserAgent from './ClientUserAgent.js';\nimport ServerUserAgent from './ServerUserAgent.js';\nimport PlatformJS from 'platform';\n\nvar $registerImaPlugin = () => {};\n\nlet initBind = (ns, oc) => {\n  if (oc.get('$Window').isClient()) {\n    oc.provide(UserAgent, ClientUserAgent, [PlatformJS, '$Window']);\n  } else {\n    oc.provide(UserAgent, ServerUserAgent, [PlatformJS, '$Request']);\n  }\n};\n\nlet initServices = (ns, oc) => {\n  oc.get(UserAgent).init();\n};\n\nlet initSettings = () => {\n  return {\n    prod: {\n      plugin: {\n        userAgent: {\n          legacyUserAgents: [\n            'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n          ]\n        }\n      }\n    }\n  };\n};\n\nexport {\n  ClientUserAgent,\n  ServerUserAgent,\n  UserAgent,\n  PlatformJS,\n  $registerImaPlugin,\n  initBind,\n  initServices\n};\n")),(0,a.kt)("h3",{id:"automatic-registration-with-object-container"},"Automatic registration with Object Container"),(0,a.kt)("p",null,"Every class that is exported in ",(0,a.kt)("inlineCode",{parentName:"p"},"main.js")," and has a static property ",(0,a.kt)("inlineCode",{parentName:"p"},"$dependencies")," that contains an array is automatically registered into ",(0,a.kt)("inlineCode",{parentName:"p"},"oc"),". Otherwise, you may ",(0,a.kt)("a",{parentName:"p",href:"https://imajs.io/docs/object-container#manually-registering-dependencies"},"register classes manually"),"."),(0,a.kt)("h3",{id:"updating-buildjs"},"Updating build.js"),(0,a.kt)("p",null,"One last thing when using a ima-plugin, or any other vendor library, is that you have to update your\n",(0,a.kt)("inlineCode",{parentName:"p"},"build.js")," file with the new dependency, otherwise it won't get built properly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var vendors = {\n    common: [\n        'ima-plugin-useragent'\n    ]\n};\n")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"As you can see, creating IMA.js plugin is very easy. You can always check our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/seznam/IMA.js-plugins/tree/master"},"IMA.js-plugins")," monorepo to take a look at many other already\nexisting plugins and how they're implemented, which we describe more in detail ",(0,a.kt)("a",{parentName:"p",href:"./available-plugins"},"in the documentation"),"."))}u.isMDXComponent=!0}}]);